# -*- mode: snippet -*-
# name: FSM_INIT
# uuid: verilog-mode
# key: FSG_INIT
# condition: t
# --
localparam ST_SIZE        = 9;
localparam ${1:CLEAR}     = {{(ST_SIZE-1){1'b0}}, 1'b1} << 0;
localparam ${2:ST1}       = {{(ST_SIZE-1){1'b0}}, 1'b1} << 1;
localparam ${3:ST2}       = {{(ST_SIZE-1){1'b0}}, 1'b1} << 2;
localparam ${4:ST3}       = {{(ST_SIZE-1){1'b0}}, 1'b1} << 3;
localparam ${5:ST4}       = {{(ST_SIZE-1){1'b0}}, 1'b1} << 4;
localparam ${6:ST5}       = {{(ST_SIZE-1){1'b0}}, 1'b1} << 5;
localparam ${7:ST6}       = {{(ST_SIZE-1){1'b0}}, 1'b1} << 6;
localparam ${8:ST7}       = {{(ST_SIZE-1){1'b0}}, 1'b1} << 7;
localparam ${9:ST8}       = {{(ST_SIZE-1){1'b0}}, 1'b1} << 8;
localparam ST_INIT        = ${1:CLEAR};

// Internal Flag and Status Register


// Output Wire Assignment

// FSM Register
reg [ST_SIZE-1:0]     state, state_nxt;

// always block to update state
always @ (posedge clk or negedge rst_n) begin
   if(!rst_n) begin
      state <= ST_INIT;
   end else begin
      if(clr) begin
         state <= ST_INIT;
      end else begin
         state <= state_nxt;
      end
   end
end

// always block to compute state_nxt
always @ (*) begin
   state_nxt = state;
   case (state)
      ${1:CLEAR} : begin
      end
      ${2:ST1}  : begin
      end
      ${3:ST2}  : begin
      end
      ${4:ST3} : begin
      end
      ${5:ST4} : begin
      end
      ${6:ST5} : begin
      end
      ${7:ST6} : begin
      end
      ${8:ST7} : begin
      end
      ${9:ST8} : begin
      end
   endcase // case (state)
end
endsnippet
